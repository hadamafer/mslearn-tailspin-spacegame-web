trigger:
- '*'

pool:
  vmImage: 'ubuntu-20.04'
  demands:
  - npm #especifica que necesitamosnpm instalado en el sistme

variables:
  buildConfiguration: 'Release' #especifica config de compilacion
  #agrega estas vvaribales porque se repiten mucho
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '6.x' #version de sdk que necesitamso 

steps: #conjutno de build task
- task: UseDotNet@2 # isntala las herramintas de compilacion requeridas para ejecutar el agente 
  displayName: 'Use .NET SDK $(dotnetSdkVersion)' #6.x
  inputs:
    packageType: sdk
    version: $(dotnetSdkVersion) #'6.x'

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)' #convierte archivos node Sass a CSS
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt' #esto es para que corra en consola, se lo peude poner de esta forma o como pongo abajo #este comando -> almacena info sobre el nombre de la pipeline, el id, el nombre de la build (por defecto es la fecha)
#- task: cmdLine@2 pero nose que mas hbaria que agregar para que haga ese comadno xd
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)  #Tailspin.SpaceGame.Web/wwwroot

- task: DotNetCoreCLI@2 #mapea con el comando dotnet 
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore' #para reiniciar o instalar las dependencias 
    projects: '**/*.csproj'

# # --compialciony piblicacion de lanzamiento de proyecto 
# - task: DotNetCoreCLI@2
#   displayName: 'Build the project - $(buildConfiguration)'
#   inputs:
#     command: 'build' # para buildear el rpecto
#     arguments: '--no-restore --configuration  $(buildConfiguration)'
#     projects: '**/*.csproj'

# - task: DotNetCoreCLI@2 #empaquetar los resultados de compilacion en una carpeta 
#   displayName: 'Publish the project - $(buildConfiguration)' #Release'
#   inputs:
#     command: 'publish'
#     projects: '**/*.csproj'
#     publishWebProjects: false
#     arguments: '--no-build --configuration  $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
#     zipAfterPublish: true #ponerlos en un zip



#tarea de compilacion y publicacion pero utilizando template -> reemplaza las tareas por llamadas al template, donde ejecuta dos veces esas tareas 
- template: templates/build.yml
  parameters:
    buildConfiguration: 'Debug'

- template: templates/build.yml
  parameters: #paramatros de entrada
    buildConfiguration: 'Release'

- task: PublishBuildArtifacts@1 #publica el archivo en la pipeline 
  displayName: 'Publish Artifact: drop'
  condition: succeeded() #ejecuta la tarea solo si la tarea anterior se jecuta correctamente #esta es la predeterminada, no hace falta ponerla 
